"use client"

import { formatDistanceToNow } from "date-fns"
import { ko } from "date-fns/locale"
import { Eye, Heart, MessageCircle, Loader2, RefreshCw, AlertCircle, User } from "lucide-react"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import Link from "next/link"
import { useInfinitePosts } from "@/hooks/use-infinite-posts"
import MinimalScrollToTop from "@/components/minimal-scroll-to-top"
import {Post} from "@/lib/types";

interface PostListProps {
    selectedCategoryId?: number | null
    categoryName?: string
    isSearchResult?: boolean
    searchQuery?: string
    enableInfiniteScroll?: boolean
    itemsPerPage?: number
    onPostSelect?: (post: Post) => void   // ‚úÖ Ï∂îÍ∞Ä
}

export default function PostList({
                                     selectedCategoryId,
                                     categoryName,
                                     isSearchResult,
                                     searchQuery,
                                     enableInfiniteScroll = true,
                                     itemsPerPage = 5,
                                     onPostSelect,
                                 }: PostListProps) {
    const { posts, loading, error, hasMore, loadMore, loadMoreRef, refresh } =
        useInfinitePosts({
            categoryId: selectedCategoryId || undefined,
            search: searchQuery || undefined,
            pageSize: itemsPerPage,
            enabled: enableInfiniteScroll,
        })

    const getTitle = () => {
        if (isSearchResult) {
            return searchQuery ? `"${searchQuery}" Í≤ÄÏÉâ Í≤∞Í≥º` : "Í≤ÄÏÉâ Í≤∞Í≥º"
        }
        if (categoryName) {
            return `${categoryName} Ïπ¥ÌÖåÍ≥†Î¶¨`
        }
        return "Ï†ÑÏ≤¥ Í∏Ä"
    }

    // ÏóêÎü¨ ÏÉÅÌÉú
    if (error && posts.length === 0) {
        return (
            <div className="space-y-4">
                <div className="flex items-center justify-between">
                    <h1 className="text-2xl font-bold">{getTitle()}</h1>
                </div>

                <Alert variant="destructive">
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription className="flex items-center justify-between">
                        <span>{error}</span>
                        <Button variant="outline" size="sm" onClick={refresh} className="ml-4 bg-transparent">
                            <RefreshCw className="h-4 w-4 mr-2" />
                            Îã§Ïãú ÏãúÎèÑ
                        </Button>
                    </AlertDescription>
                </Alert>
            </div>
        )
    }

    return (
        <div className="space-y-4">
            <div className="flex items-center justify-between">
                <h1 className="text-2xl font-bold">{getTitle()}</h1>
                <div className="flex items-center gap-2">
                    <Badge variant="secondary">
                        {enableInfiniteScroll
                            ? hasMore
                                ? `Î°úÎìúÎê®`
                                : `Í∞ú`
                            : `Í∞ú`}
                    </Badge>
                    {enableInfiniteScroll && (
                        <Badge variant="outline" className="text-xs">
                            Î¨¥ÌïúÏä§ÌÅ¨Î°§
                        </Badge>
                    )}
                    <Button variant="ghost" size="sm" onClick={refresh} disabled={loading}>
                        <RefreshCw className={`h-4 w-4 ${loading ? "animate-spin" : ""}`} />
                    </Button>
                </div>
            </div>

            {/* TOP Î≤ÑÌäº */}
            <MinimalScrollToTop threshold={200} />

            {/* Ï¥àÍ∏∞ Î°úÎî© ÏÉÅÌÉú */}
            {loading && (
                <div className="flex items-center justify-center py-12">
                    <div className="flex items-center gap-2 text-muted-foreground">
                        <Loader2 className="h-5 w-5 animate-spin" />
                        <span>Ìè¨Ïä§Ìä∏Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
                    </div>
                </div>
            )}

            {/* Ìè¨Ïä§Ìä∏ Î™©Î°ù */}
            <div className="space-y-3">
                {posts.map((post, index) => (
                    // <Card key={`${post.id}-${index}`} className="cursor-pointer hover:shadow-md transition-shadow">
                    <Card
                        key={`${post.id}-${index}`}
                        className="cursor-pointer hover:shadow-md transition-shadow"
                        onClick={() => onPostSelect?.(post)}   // ‚úÖ Î∂ÄÎ™® ÏΩúÎ∞± Ìò∏Ï∂ú
                        role="button"
                        tabIndex={0}
                        onKeyDown={(e) => {
                            if (e.key === "Enter" || e.key === " ") {
                                e.preventDefault()
                                onPostSelect?.(post)
                            }
                        }}
                    >
                        <Link href={`/blog/post/${post.id}`}>
                            <CardHeader className="pb-3">
                                <div className="flex items-start justify-between gap-4">
                                    <div className="flex-1">
                                        <div className="flex items-center gap-2 mb-2">
                                            <span className="text-sm font-medium text-muted-foreground">#{index + 1}</span>
                                            <Badge variant="outline" className="text-xs">
                                                {post.categoryName}
                                            </Badge>

                                        </div>
                                        <h3 className="font-semibold text-lg hover:text-primary transition-colors">{post.title}</h3>

                                        {/* ÏûëÏÑ±Ïûê Ï†ïÎ≥¥ */}
                                        <div className="flex items-center gap-2 mt-2 text-xs text-muted-foreground">
                                            <User className="h-3 w-3" />
                                            <span>{post.authorName}</span>
                                        </div>
                                    </div>
                                </div>
                            </CardHeader>

                            <CardContent className="pt-0">
                                <div className="flex items-center justify-between text-sm text-muted-foreground">
                                    <div className="flex items-center gap-4">
                                        <div className="flex items-center gap-1">
                                            <Eye className="h-4 w-4" />
                                            <span>{post.views?.toLocaleString() || 0}</span>
                                        </div>
                                        <div className="flex items-center gap-1">
                                            <Heart className="h-4 w-4" />
                                            <span>{post.likes || 0}</span>
                                        </div>
                                        <div className="flex items-center gap-1">
                                            <MessageCircle className="h-4 w-4" />
                                            {/*<span>{post.commentCount || 0}</span>*/}
                                        </div>
                                    </div>
                                    <span>
                    {post.createdAt &&
                        formatDistanceToNow(new Date(post.createdAt), {
                            addSuffix: true,
                            locale: ko,
                        })}
                  </span>
                                </div>
                            </CardContent>
                        </Link>
                    </Card>
                ))}
            </div>

            {/* Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Î°úÎî© ÏòÅÏó≠ */}
            {enableInfiniteScroll && hasMore && (
                <div ref={loadMoreRef} className="flex flex-col items-center py-8 space-y-4">
                    {loading ? (
                        <div className="flex items-center gap-2 text-muted-foreground">
                            <Loader2 className="h-4 w-4 animate-spin" />
                            <span>Îçî ÎßéÏùÄ Í∏ÄÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
                        </div>
                    ) : (
                        <Button variant="outline" onClick={loadMore} className="w-full max-w-xs bg-transparent">
                            Îçî Î≥¥Í∏∞
                        </Button>
                    )}
                </div>
            )}

            {/* ÏóêÎü¨ ÏÉÅÌÉú (ÏùºÎ∂Ä Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞) */}
            {error && posts.length > 0 && (
                <Alert variant="destructive">
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription className="flex items-center justify-between">
                        <span>Ï∂îÍ∞Ä Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§: {error}</span>
                        <Button variant="outline" size="sm" onClick={loadMore} disabled={loading}>
                            <RefreshCw className="h-4 w-4 mr-2" />
                            Îã§Ïãú ÏãúÎèÑ
                        </Button>
                    </AlertDescription>
                </Alert>
            )}

            {/* Î™®Îì† Í∏ÄÏùÑ Îã§ Î≥¥Ïó¨Ï§Ä Í≤ΩÏö∞ */}
            {enableInfiniteScroll && !hasMore && posts.length > 0 && (
                <div className="text-center py-8">
                    <p className="text-muted-foreground">Î™®Îì† Í∏ÄÏùÑ ÌôïÏù∏ÌñàÏäµÎãàÎã§! üéâ</p>
                    <p className="text-sm text-muted-foreground mt-1">Ï¥ù {posts.length}Í∞úÏùò Í∏Ä</p>
                </div>
            )}

            {/* Í∏ÄÏù¥ ÏóÜÎäî Í≤ΩÏö∞ */}
            {!loading && posts.length === 0 && !error && (
                <div className="text-center py-12">
                    <p className="text-muted-foreground">{isSearchResult ? "Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§." : "Í∏ÄÏù¥ ÏóÜÏäµÎãàÎã§."}</p>
                </div>
            )}
        </div>
    )
}
